/* * Copyright (c) 2020 Ruslan Potekhin */package com.feedapp.app.viewModelsimport androidx.lifecycle.LiveDataimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport com.feedapp.app.data.models.FoodProductimport com.feedapp.app.data.models.RecentProductimport com.feedapp.app.data.models.day.DayDateimport com.feedapp.app.data.repositories.DayRepositoryimport com.feedapp.app.data.repositories.SearchFoodRepositoryimport com.feedapp.app.data.repositories.UserRepositoryimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.launchimport javax.inject.Injectclass DetailedViewModel @Inject constructor(    private val searchRepository: SearchFoodRepository,    private val dayRepository: DayRepository,    private val userRepository: UserRepository) : ViewModel() {    val multiplier = searchRepository.multiplier    val isConnected = searchRepository.isConnected    // 0 - grams' position in array of list by default    val multiplierPosition = searchRepository.multiplierPosition    val isSearching: LiveData<Boolean> = searchRepository.isSearching    val foodInfo: LiveData<FoodProduct> = searchRepository.foodInfo    /**     * search product in offline DB     */    fun searchFoodProduct(id: Int) = searchRepository.searchFoodProduct(id)    fun isMultiplierValueValid(text: String): Boolean {        return !(text.toDouble() > 100 && (multiplierPosition.value != 0))    }    fun canSave(): Boolean {        return isSearching.value == false    }    fun saveConsumedFoodToDB(        dateString: DayDate?,        mealType: Int?,        grams: Float    ) =        viewModelScope.launch(Dispatchers.IO) {            if (dateString == null || mealType == null) return@launch            // save to consumed Products to the specific date            dayRepository.saveSearchProductToDay(                dateString,                mealType,                foodInfo.value,                grams            )            // save to recent products            foodInfo.value?.let {                val recentProduct = RecentProduct(                    name = it.name,                    foodProductId = it.id                )                userRepository.saveToRecent(recentProduct)            }        }    fun changeMultiplierValue(d: Double) {        searchRepository.changeMultiplierValue(d)    }}